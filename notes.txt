template literals - name for the `${variable}` syntax

// destructure object - like a shorthand property 
// (e.g. replace personalInformation.firstName)
const { firstName: fn, lastName: ln } = personalInformation;

// destructor array
let [firstName, middleName, lastName] = ["James", "Tiberius", "Kirk"];
// can also assign using them
lastName = "Smith";

// object literal, nice shorthand - will fill in correctly
 function addressMaker(city, country) { const newAddress = { city, country }; 

 // for of loop in es6 - just like a foreach in c#
  for (const income of incomes) {       
        total += income;
      }
// interestingly...this would not update the values..so

// spread operator - fill array, or object with these values.  neat.
 let example1 = [1, 2, 3, 4, 5, 6]; let example2 = [...example1];

// rest operator, for when calling a function when you don't know how many arguments you'll use
// very much like the params keyword in c#
function add(...nums) 

// arrow funtions help reduce some of the boilerplate code
let total = nums.reduce(function(x, y) { return x + y; });
let total = nums.reduce((x, y) => x + y);

// can set default params for functions like in c#
 function add(numArray = []) {
 }

// includes... returns a bool if element is in array
let numArray = [1,2,3,4,5]; console.log(numArray.includes(0)) ... false

// const.  interesting - can't change underlying type.  
const example = 5;
example = 10; // doesn't work

const example = [];
example.push(5); // this works fine
example.firstName = "Walt"; // and this

// import & export looks like
export const data = ["james", "tiberius", "kirk"];
import { data } from "./name.js";

// padstart and padend...fills in *available* space
